{"version":3,"file":"static/webpack/static/development/pages/channels.js.c62f4b7e7f62c6c57154.hot-update.js","sources":["webpack:///./pages/channels.js"],"sourcesContent":["'use strict'\r\n\r\nimport Link from 'next/link'\r\nimport Error from './_error'\r\nimport PodcastWithClick from '../components/podcastWithClick'\r\nimport PodcastPlayer from '../components/PodcastPlayer';\r\nimport ChannelGrid from '../components/ChannelGrid'\r\n\r\nexport default class extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            openPodcast: null\r\n        }\r\n    }\r\n    \r\n    static async getInitialProps(data) {\r\n        let query = data.query\r\n        let idChannel = query.id\r\n        // res es la respuesta de next.\r\n        let res = data.res\r\n\r\n        try {\r\n            let [ reqChannels, reqAudios, reqSeries ] = await Promise.all([\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\r\n                fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\r\n            ])\r\n\r\n            if( reqChannels.status >= 400 ) {\r\n                // para cuestiones de SEO\r\n                res.satusCode = reqChannels.status \r\n                return { channel : null, audios : null, series : null, statusCode: reqChannels.status }\r\n            }\r\n    \r\n            // let reqChannels = await fetch(`https://api.audioboom.com/channels/${idChannel}`)\r\n            let dataChannel = await reqChannels.json()\r\n            let channel = dataChannel.body.channel\r\n    \r\n            // let reqClip = await fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\r\n            let dataAudios = await reqAudios.json()\r\n            let audios = dataAudios.body.audio_clips\r\n    \r\n            // let reqSerie = await fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\r\n            let dataSerie = await reqSeries.json()\r\n            let series = dataSerie.body.channels\r\n    \r\n            return { channel, audios, series, statusCode: 200 }\r\n\r\n        } catch (e) {\r\n            return { channel : null, audios : null, series : null, statusCode: 503 }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    openPodcast = (event, podcast) => {\r\n        event.preventDefault()\r\n\r\n        this.setState({\r\n            openPodcast: podcast\r\n        })\r\n    }\r\n\r\n    closePodcast = (event) => {\r\n        event.preventDefault()\r\n        this.setState({\r\n            openPodcast: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { channel, audios, series, statusCode } = this.props\r\n        const { openPodcast } = this.state\r\n\r\n        if( statusCode !== 200 ) {\r\n            return <Error statusCode={ statusCode } />\r\n        }\r\n\r\n        return (\r\n            <div className=\"channels\">\r\n                <header> {channel.title} </header>\r\n\r\n                <img className=\"\" src={channel.urls.banner_image.original}></img>\r\n                \r\n                {\r\n                    openPodcast && \r\n                    <div className=\"modal\">\r\n                        <PodcastPlayer \r\n                            clip={ openPodcast }\r\n                            onClose={ this.closePodcast } />\r\n                    </div>\r\n                }\r\n                <h1>{ channel.title }</h1>\r\n\r\n                {/* <ChannelGrid channels={audios}></ChannelGrid> */}\r\n                {\r\n\r\n                    audios.map((clip, i) => (\r\n                        <Link href={`/podcast?idAudio=${ clip.id }`}>\r\n                            <a className=\"channel\">\r\n                                <img src={clip.urls.image} alt=\"imagen\" />\r\n                                <p>{clip.title}</p>\r\n                            </a>\r\n                        </Link>\r\n                    ))\r\n                }\r\n                <h1>Sub-series</h1>\r\n                {\r\n                    (series.length !== 0) ?\r\n                    series.map((serie, i) => (\r\n                        <div>{serie.title}</div>\r\n                    )) :\r\n                    <p>No hay subseries para mostrar</p>    \r\n                }\r\n\r\n                <h2>Ãšltimos podcast</h2>\r\n                <PodcastWithClick \r\n                    podcasts={ audios } \r\n                    onClickPodcast={ this.openPodcast } \r\n                    />\r\n\r\n                <style jsx>{`\r\n                    header {\r\n                        color: #fff;\r\n                        background: #8756ca;\r\n                        padding: 15px;\r\n                        text-align: center;\r\n                    }\r\n                    .channels {\r\n                        display: grid;\r\n                        grid-gap: 15px;\r\n                        padding: 15px;\r\n                        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\r\n                    }\r\n                    a.channel {\r\n                        display: block;\r\n                        margin-bottom: 0.5em;\r\n                        color: #333;\r\n                        text-decoration: none;\r\n                    }                    \r\n                    a {\r\n                        display: block;\r\n                        margin-bottom: 0.5em;\r\n                        color: #333;\r\n                        text-decoration: none;\r\n                    }\r\n                    .channel img {\r\n                        border-radius: 3px;\r\n                        box-shadow: 0px 2px 6px rgba(0,0,0,0.15);\r\n                        width: 100%;\r\n                    }\r\n                    h2 {\r\n                        padding: 5px;\r\n                        font-size: 0.9em;\r\n                        font-weight: 600;\r\n                        margin: 0;\r\n                        text-align: center;\r\n                    } \r\n                    .modal {\r\n                        position: fixed;\r\n                        top: 0;\r\n                        left: 0;\r\n                        right: 0;\r\n                        bottom: 0;\r\n                        z-index: 99999;\r\n                    }\r\n                `}</style>\r\n\r\n                <style jsx global>{`\r\n                    body {\r\n                        margin: 0;\r\n                        font-family: system-ui;\r\n                        background: white;\r\n                    }\r\n                `}</style>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiDA;AACA;AACA;AACA;AADA;AAGA;AACA;AAvDA;AAyDA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA3DA;AACA;AADA;AAHA;AAMA;AACA;;;AAwDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAJA;AASA;AAAA;AAGA;AACA;AAAA;AADA;AAGA;AAAA;AAGA;AAAA;AAEA;AACA;AAFA;AArCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkGA;;;;;;AAlKA;;;;;;;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;AADA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAGA;AACA;;AADA;AACA;AACA;;AAEA;AACA;;AADA;AACA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA7CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}